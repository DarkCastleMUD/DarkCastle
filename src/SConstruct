import glob
import sys
import os
import datetime
import subprocess
from subprocess import *

env = Environment(CCFLAGS = '-ggdb3 -m64 -std=gnu++1y -Wno-write-strings -fdiagnostics-color=always',
    LINKFLAGS = '-ggdb3 -m64 -std=gnu++1y' )

if os.path.exists('/usr/bin/g++-7'):
	env.Replace(CXX = 'g++-7')

if os.path.exists('/usr/bin/g++-9'):
	env.Replace(CXX = 'g++-9')
	env.Replace(CCFLAGS = '-ggdb -m64 -std=gnu++17 -Wno-write-strings -fdiagnostics-color=always')
	env.Replace(LINKFLAGS = '-ggdb -m64 -std=gnu++17 -fdiagnostics-color=always')

if os.path.exists('/usr/bin/g++-10'):
       env.Replace(CXX = 'g++-10')
       env.Replace(CCFLAGS = '-ggdb -m64 -std=gnu++20 -Wno-write-strings -fdiagnostics-color=always')
       env.Replace(LINKFLAGS = '-ggdb -m64 -std=gnu++20')

if os.path.exists('/usr/bin/g++-11'):
       env.Replace(CXX = 'g++-11')
       env.Replace(CCFLAGS = '-ggdb -m64 -std=gnu++23 -Wno-write-strings -fdiagnostics-color=always')
       env.Replace(LINKFLAGS = '-ggdb -m64 -std=gnu++23')

if os.path.exists('/usr/bin/g++-12'):
       env.Replace(CXX = 'g++-12')
       env.Replace(CCFLAGS = '-ggdb -m64 -std=gnu++23 -Wno-write-strings -fdiagnostics-color=always')
       env.Replace(LINKFLAGS = '-ggdb -m64 -std=gnu++23')

debug=ARGUMENTS.get('debug', 0)
profile=ARGUMENTS.get('profile', 0)
twitter=ARGUMENTS.get('twitter', 0)
warning=ARGUMENTS.get('warning', 0)

if int(debug):
   env.Append(CCFLAGS = ' -O0')
   env.Append(LINKFLAGS = ' -O0')
else:
   env.Append(CCFLAGS = ' -O3')
   env.Append(LINKFLAGS = ' -O3')

if int(warning):
    env.Append(CCFLAGS = ' -Wall')
    env.Append(LINKFLAGS = ' -Wall')

if int(profile):
   env.Append(CCFLAGS = ' -fprofile-arcs -ftest-coverage')
   env.Append(LINKFLAGS = ' -fprofile-arcs -ftest-coverage')

def git_describe():
    pipe = Popen('git describe --tags --always --abbrev=8', stdout=PIPE, stderr=None, shell=True)
    (output, error_output) = pipe.communicate(input=None)
    return (output.strip().decode('ascii'))

print(git_describe())

version=git_describe()
build_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

wizard_src = glob.glob('wizard/*.cpp')
class_src = glob.glob('class/*.cpp')
backend_src = glob.glob('Backend/*.cpp')
libdcastle_src = glob.glob('[abc]*.cpp') + glob.glob('[e-l]*.cpp') + glob.glob('[n-r]*.cpp') + glob.glob('[t-w,yz]*.cpp') + glob.glob('mo*.cpp') + ['magic.cpp','memory.cpp','meta.cpp','MobActivity.cpp','Leaderboard.cpp','Timer.cpp', 'Trace.cpp', 'db.cpp', 'save.cpp', 'shop.cpp', 'sing.cpp', 'social.cpp', 'spec.cpp',  'spells.cpp', 'stat.cpp', 'CommandStack.cpp'] + wizard_src + class_src + backend_src

if not int(twitter):
    env.Append(CPPDEFINES=['LINUX'])
else:
    env.Append(CPPDEFINES=['LINUX', 'TWITTER'])
    
env.Append(CPPPATH = ['include'])
env.Append(LIBPATH = ['/usr/local/lib', '.'])
DC = env.Object('DC.cpp', CPPDEFINES=['LINUX', {'VERSION' :('\\"%s\\"' % version)}, {'BUILD_TIME' :('\\"%s\\"' % build_time)}])
           
libdcastle=env.Clone()
libdcastle.MergeFlags({'CPPPATH' : '/usr/include/pgsql/'})
libdcastle.StaticLibrary('dcastle', [libdcastle_src + DC]);

dcastle=env.Clone()
dcastle.MergeFlags({'LIBS' : ['dcastle', 'crypt', 'mcheck', 'z', 'pq', 'fmt']})
dcastle.Program('dcastle', ['dcastle.cpp'])

debug=env.Clone()
debug.MergeFlags({'LIBS' : ['dcastle', 'crypt', 'mcheck', 'z', 'pq', 'fmt']})
debug.Program('debug', ['debug.cpp'])


